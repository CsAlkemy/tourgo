{"version":3,"sources":["MongooseModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAY,kBAAkB,EAAU,MAAM,EAAC,MAAM,cAAc,CAAC;AAI3F,OAAO,EAAC,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAE3D,qBACa,cAAe,YAAW,MAAM,EAAE,eAAe;IAU5B,OAAO,CAAC,UAAU;IAAsB,OAAO,CAAC,eAAe;IAR/F,OAAO,CAAC,GAAG,CAAS;IAGpB,OAAO,CAAC,iBAAiB,CAA6B;IAGtD,OAAO,CAAC,IAAI,CAAiC;gBAEL,UAAU,EAAE,kBAAkB,EAAU,eAAe,EAAE,eAAe;IAEhH,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI;IAgB9B,gBAAgB,IAAI,IAAI;IAIxB,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI;CAGlC","file":"MongooseModule.d.ts","sourcesContent":["import {AfterRoutesInit, Constant, ExpressApplication, Module, OnInit} from \"@tsed/common\";\nimport * as Mongoose from \"mongoose\";\nimport {MDBConnection} from \"./interfaces\";\nimport {ValidationErrorMiddleware} from \"./middlewares/ValidationErrorMiddleware\";\nimport {MongooseService} from \"./services/MongooseService\";\n\n@Module()\nexport class MongooseModule implements OnInit, AfterRoutesInit {\n  @Constant(\"mongoose.url\")\n  private url: string;\n\n  @Constant(\"mongoose.connectionOptions\")\n  private connectionOptions: Mongoose.ConnectionOptions;\n\n  @Constant(\"mongoose.urls\")\n  private urls: {[key: string]: MDBConnection};\n\n  constructor(@ExpressApplication private expressApp: ExpressApplication, private mongooseService: MongooseService) {}\n\n  $onInit(): Promise<any> | void {\n    const promises: Promise<Mongoose.Mongoose>[] = [];\n\n    if (this.url) {\n      promises.push(this.mongooseService.connect(\"default\", this.url, this.connectionOptions || {}));\n    }\n\n    if (this.urls) {\n      Object.keys(this.urls).forEach((key: string) => {\n        promises.push(this.mongooseService.connect(key, this.urls[key].url, this.urls[key].connectionOptions || {}));\n      });\n    }\n\n    return Promise.all(promises);\n  }\n\n  $afterRoutesInit(): void {\n    this.expressApp.use(ValidationErrorMiddleware as any);\n  }\n\n  $onDestroy(): Promise<any> | void {\n    return this.mongooseService.closeConnections();\n  }\n}\n"],"sourceRoot":"../src"}