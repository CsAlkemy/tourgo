{"version":3,"sources":["utils/createModel.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAC;AAErC,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAE5C;;;;;;;;;GASG;AACH,wBAAgB,WAAW,CAAC,CAAC,EAC3B,MAAM,EAAE,GAAG,EACX,MAAM,EAAE,QAAQ,CAAC,MAAM,EACvB,IAAI,GAAE,MAAuB,EAC7B,UAAU,CAAC,EAAE,MAAM,EACnB,QAAQ,CAAC,EAAE,OAAO,GACjB,aAAa,CAAC,CAAC,CAAC,CAIlB","file":"createModel.d.ts","sourcesContent":["import {nameOf, Store} from \"@tsed/core\";\nimport * as mongoose from \"mongoose\";\nimport {MONGOOSE_MODEL_NAME} from \"../constants\";\nimport {MongooseModel} from \"../interfaces\";\n\n/**\n * Create an instance of mongoose.model from a class.\n *\n * @param {Type<any>} target Class attached to the schema and model.\n * @param {\"mongoose\".Schema} schema Schema that will be attached to the model.\n * @param name model name\n * @param collection (optional, induced from model name)\n * @param skipInit whether to skip initialization (defaults to false)\n * @returns {Model<T extends Document>}\n */\nexport function createModel<T>(\n  target: any,\n  schema: mongoose.Schema,\n  name: string = nameOf(target),\n  collection?: string,\n  skipInit?: boolean\n): MongooseModel<T> {\n  Store.from(target).set(MONGOOSE_MODEL_NAME, name);\n\n  return mongoose.model(name, schema, collection, skipInit);\n}\n"],"sourceRoot":"../../src"}