{"version":3,"sources":["utils/schemaOptions.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,gBAAgB,EAAE,gBAAgB,EAAS,MAAM,UAAU,CAAC;AAEpE,OAAO,EAAC,qBAAqB,EAAC,MAAM,eAAe,CAAC;AAEpD;;;;GAIG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,qBAAqB,OAYzE;AAED;;;;GAIG;AACH,wBAAgB,YAAY,CAAC,EAAE,EAAE,QAAQ,2DAQxC;AAED;;;;GAIG;AACH,wBAAgB,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,qBAAqB,QAwB7E","file":"schemaOptions.d.ts","sourcesContent":["import {deepExtends, Store} from \"@tsed/core\";\nimport {HookDoneFunction, HookNextFunction, Schema} from \"mongoose\";\nimport {MONGOOSE_SCHEMA, MONGOOSE_SCHEMA_OPTIONS} from \"../constants\";\nimport {MongooseSchemaOptions} from \"../interfaces\";\n\n/**\n *\n * @param target\n * @param {MongooseSchemaOptions} options\n */\nexport function schemaOptions(target: any, options?: MongooseSchemaOptions) {\n  const store = Store.from(target);\n\n  if (!store.has(MONGOOSE_SCHEMA_OPTIONS)) {\n    store.set(MONGOOSE_SCHEMA_OPTIONS, {});\n  }\n\n  if (options) {\n    store.set(MONGOOSE_SCHEMA_OPTIONS, deepExtends(store.get(MONGOOSE_SCHEMA_OPTIONS), options));\n  }\n\n  return store.get(MONGOOSE_SCHEMA_OPTIONS);\n}\n\n/**\n *\n * @param {Function} fn\n * @returns {any}\n */\nexport function buildPreHook(fn: Function) {\n  return fn.length === 2\n    ? function(next: HookNextFunction) {\n        return fn(this, next);\n      }\n    : function(next: HookNextFunction, done: HookDoneFunction) {\n        return fn(this, next, done);\n      };\n}\n\n/**\n *\n * @param target\n * @param {MongooseSchemaOptions} options\n */\nexport function applySchemaOptions(target: any, options: MongooseSchemaOptions) {\n  const store = Store.from(target);\n\n  options = schemaOptions(target, options);\n\n  if (store.has(MONGOOSE_SCHEMA)) {\n    const schema: Schema = store.get(MONGOOSE_SCHEMA);\n\n    if (options.plugins) {\n      options.plugins.forEach(item => schema.plugin(item.plugin, item.options));\n    }\n\n    if (options.indexes) {\n      options.indexes.forEach(item => schema.index(item.fields, item.options));\n    }\n\n    if (options.pre) {\n      options.pre.forEach(item => schema.pre(item.method, !!item.parallel, buildPreHook(item.fn), item.errorCb));\n    }\n\n    if (options.post) {\n      options.post.forEach(item => schema.post(item.method, item.fn as any));\n    }\n  }\n}\n"],"sourceRoot":"../../src"}