{"version":3,"sources":["utils/createModel.ts"],"names":[],"mappings":";;AAAA,qCAAyC;AACzC,qCAAqC;AACrC,4CAAiD;AAGjD;;;;;;;;;GASG;AACH,SAAgB,WAAW,CACzB,MAAW,EACX,MAAuB,EACvB,OAAe,aAAM,CAAC,MAAM,CAAC,EAC7B,UAAmB,EACnB,QAAkB;IAElB,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,+BAAmB,EAAE,IAAI,CAAC,CAAC;IAElD,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAVD,kCAUC","file":"createModel.js","sourcesContent":["import {nameOf, Store} from \"@tsed/core\";\nimport * as mongoose from \"mongoose\";\nimport {MONGOOSE_MODEL_NAME} from \"../constants\";\nimport {MongooseModel} from \"../interfaces\";\n\n/**\n * Create an instance of mongoose.model from a class.\n *\n * @param {Type<any>} target Class attached to the schema and model.\n * @param {\"mongoose\".Schema} schema Schema that will be attached to the model.\n * @param name model name\n * @param collection (optional, induced from model name)\n * @param skipInit whether to skip initialization (defaults to false)\n * @returns {Model<T extends Document>}\n */\nexport function createModel<T>(\n  target: any,\n  schema: mongoose.Schema,\n  name: string = nameOf(target),\n  collection?: string,\n  skipInit?: boolean\n): MongooseModel<T> {\n  Store.from(target).set(MONGOOSE_MODEL_NAME, name);\n\n  return mongoose.model(name, schema, collection, skipInit);\n}\n"],"sourceRoot":"../../src"}