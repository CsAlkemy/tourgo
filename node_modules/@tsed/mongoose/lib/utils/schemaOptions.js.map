{"version":3,"sources":["utils/schemaOptions.ts"],"names":[],"mappings":";;AAAA,qCAA8C;AAE9C,4CAAsE;AAGtE;;;;GAIG;AACH,SAAgB,aAAa,CAAC,MAAW,EAAE,OAA+B;IACxE,MAAM,KAAK,GAAG,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEjC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mCAAuB,CAAC,EAAE;QACvC,KAAK,CAAC,GAAG,CAAC,mCAAuB,EAAE,EAAE,CAAC,CAAC;KACxC;IAED,IAAI,OAAO,EAAE;QACX,KAAK,CAAC,GAAG,CAAC,mCAAuB,EAAE,kBAAW,CAAC,KAAK,CAAC,GAAG,CAAC,mCAAuB,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;KAC9F;IAED,OAAO,KAAK,CAAC,GAAG,CAAC,mCAAuB,CAAC,CAAC;AAC5C,CAAC;AAZD,sCAYC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,EAAY;IACvC,OAAO,EAAE,CAAC,MAAM,KAAK,CAAC;QACpB,CAAC,CAAC,UAAS,IAAsB;YAC7B,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACxB,CAAC;QACH,CAAC,CAAC,UAAS,IAAsB,EAAE,IAAsB;YACrD,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;AACR,CAAC;AARD,oCAQC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,MAAW,EAAE,OAA8B;IAC5E,MAAM,KAAK,GAAG,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEjC,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEzC,IAAI,KAAK,CAAC,GAAG,CAAC,2BAAe,CAAC,EAAE;QAC9B,MAAM,MAAM,GAAW,KAAK,CAAC,GAAG,CAAC,2BAAe,CAAC,CAAC;QAElD,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC3E;QAED,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC1E;QAED,IAAI,OAAO,CAAC,GAAG,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC5G;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAS,CAAC,CAAC,CAAC;SACxE;KACF;AACH,CAAC;AAxBD,gDAwBC","file":"schemaOptions.js","sourcesContent":["import {deepExtends, Store} from \"@tsed/core\";\nimport {HookDoneFunction, HookNextFunction, Schema} from \"mongoose\";\nimport {MONGOOSE_SCHEMA, MONGOOSE_SCHEMA_OPTIONS} from \"../constants\";\nimport {MongooseSchemaOptions} from \"../interfaces\";\n\n/**\n *\n * @param target\n * @param {MongooseSchemaOptions} options\n */\nexport function schemaOptions(target: any, options?: MongooseSchemaOptions) {\n  const store = Store.from(target);\n\n  if (!store.has(MONGOOSE_SCHEMA_OPTIONS)) {\n    store.set(MONGOOSE_SCHEMA_OPTIONS, {});\n  }\n\n  if (options) {\n    store.set(MONGOOSE_SCHEMA_OPTIONS, deepExtends(store.get(MONGOOSE_SCHEMA_OPTIONS), options));\n  }\n\n  return store.get(MONGOOSE_SCHEMA_OPTIONS);\n}\n\n/**\n *\n * @param {Function} fn\n * @returns {any}\n */\nexport function buildPreHook(fn: Function) {\n  return fn.length === 2\n    ? function(next: HookNextFunction) {\n        return fn(this, next);\n      }\n    : function(next: HookNextFunction, done: HookDoneFunction) {\n        return fn(this, next, done);\n      };\n}\n\n/**\n *\n * @param target\n * @param {MongooseSchemaOptions} options\n */\nexport function applySchemaOptions(target: any, options: MongooseSchemaOptions) {\n  const store = Store.from(target);\n\n  options = schemaOptions(target, options);\n\n  if (store.has(MONGOOSE_SCHEMA)) {\n    const schema: Schema = store.get(MONGOOSE_SCHEMA);\n\n    if (options.plugins) {\n      options.plugins.forEach(item => schema.plugin(item.plugin, item.options));\n    }\n\n    if (options.indexes) {\n      options.indexes.forEach(item => schema.index(item.fields, item.options));\n    }\n\n    if (options.pre) {\n      options.pre.forEach(item => schema.pre(item.method, !!item.parallel, buildPreHook(item.fn), item.errorCb));\n    }\n\n    if (options.post) {\n      options.post.forEach(item => schema.post(item.method, item.fn as any));\n    }\n  }\n}\n"],"sourceRoot":"../../src"}