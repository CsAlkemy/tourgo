import { MongooseVirtualRefOptions } from "../interfaces/MongooseVirtualRefOptions";
export declare type VirtualRef<T> = T | null;
export declare type VirtualRefs<T> = T[];
/**
 * Define a property as mongoose virtual reference to other Model (decorated with @Model).
 *
 * ::: warning
 * To avoid circular dependencies, do not use the virtual reference model in
 * anything except a type declaration. Using the virtual reference model will prevent
 * typescript transpiler from stripping away the import statement and cause a circular
 * import in node.
 * :::
 *
 * ### Example
 *
 * ```typescript
 *
 * @Model()
 * class FooModel {
 *
 *    @VirtualRef("Foo2Model", "foo")
 *    field: VirtualRef<Foo2Model>
 *
 *    @VirtualRef("Foo2Model", "foo")
 *    list: VirtualRefs<Foo2Model>
 * }
 *
 * @Model()
 * class Foo2Model {
 *    @Ref(FooModel)
 *    foo: Ref<FooModel>;
 * }
 * ```
 *
 * @param type
 * @param foreignField
 * @returns {Function}
 * @decorator
 * @mongoose
 * @property
 */
export declare function VirtualRef(type: string, foreignField: string): Function;
export declare function VirtualRef(options: MongooseVirtualRefOptions): Function;
export declare function VirtualRef(options: string | MongooseVirtualRefOptions, foreignField?: string): Function;
