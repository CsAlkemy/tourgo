{"version":3,"sources":["decorators/dynamicRef.ts"],"names":[],"mappings":"AAKA,oBAAY,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,wBAAgB,UAAU,CAAC,OAAO,EAAE,MAAM,YAgBzC","file":"dynamicRef.d.ts","sourcesContent":["import {Property, Schema} from \"@tsed/common\";\nimport {applyDecorators, Store, StoreFn, StoreMerge} from \"@tsed/core\";\nimport {Schema as MongooseSchema} from \"mongoose\";\nimport {MONGOOSE_SCHEMA} from \"../constants\";\n\nexport type DynamicRef<T> = T | string;\n/**\n * Define a property as mongoose reference to other Model (decorated with @Model).\n *\n * ### Example\n *\n * ```typescript\n * @Model()\n * class FooModel {\n *\n *    @DynamicRef('type')\n *    field: DynamicRef<OtherFooModel | OtherModel>\n *\n *    @Enum(['OtherFooModel', 'OtherModel'])\n *    type: string\n * }\n *\n * @Model()\n * class OtherFooModel {\n * }\n *\n * @Model()\n * class OtherModel {\n * }\n * ```\n *\n * @param refPath\n * @returns {Function}\n * @decorator\n * @mongoose\n * @property\n */\nexport function DynamicRef(refPath: string) {\n  return applyDecorators(\n    Property({use: String}),\n    Schema({\n      type: String,\n      example: \"5ce7ad3028890bd71749d477\",\n      description: \"Mongoose Ref ObjectId\"\n    }),\n    StoreFn((store: Store) => {\n      delete store.get(\"schema\").$ref;\n    }),\n    StoreMerge(MONGOOSE_SCHEMA, {\n      type: MongooseSchema.Types.ObjectId,\n      refPath\n    })\n  );\n}\n"],"sourceRoot":"../../src"}