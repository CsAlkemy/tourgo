{"version":3,"sources":["decorators/preHook.ts"],"names":[],"mappings":";;AAAA,qCAA4C;AAG5C,0DAA0D;AAO1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,SAAgB,OAAO,CACrB,MAAc,EACd,EAA8E,EAC9E,OAAwB;IAExB,OAAO,CAAC,GAAG,IAAW,EAAE,EAAE;QACxB,IAAI,uBAAgB,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;YACvC,OAAO,GAAG,EAAoB,CAAC;YAC/B,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QAED,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QAExB,kCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC1B,GAAG,EAAE;gBACH,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACrB,MAAM;oBACN,EAAE,EAAE,EAA8D;iBACnE,CAAC;aACH;SACF,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAtBD,0BAsBC","file":"preHook.js","sourcesContent":["import {getDecoratorType} from \"@tsed/core\";\nimport {HookErrorCallback} from \"mongoose\";\nimport {MongoosePreHookAsyncCB, MongoosePreHookSyncCB} from \"../interfaces\";\nimport {applySchemaOptions} from \"../utils/schemaOptions\";\n\nexport interface PreHookOptions {\n  parallel?: boolean;\n  errorCb?: HookErrorCallback;\n}\n\n/**\n *\n * We can simply attach a `@PreHook` decorator to your model class and\n * define the hook function like you normally would in Mongoose.\n *\n * ```typescript\n * import {IgnoreProperty, Required} from \"@tsed/common\";\n * import {PreHook, Model} from \"@tsed/mongoose\";\n *\n * @Model()\n * @PreHook(\"save\", (car: CarModel, next) => {\n *    if (car.model === 'Tesla') {\n *        car.isFast = true;\n *      }\n *      next();\n *})\n * export class CarModel {\n *\n *    @IgnoreProperty()\n *    _id: string;\n *\n *    @Required()\n *    model: string;\n *\n *    @Required()\n *    isFast: boolean;\n *\n *    // or Prehook on static method\n *    @PreHook(\"save\")\n *    static preSave(car: CarModel, next) {\n *       if (car.model === 'Tesla') {\n *           car.isFast = true;\n *       }\n *       next();\n *    }\n * }\n * ```\n *\n * This will execute the pre-save hook each time a `CarModel` document is saved.\n *\n * @param {string} method\n * @param fn\n * @param options\n * @returns {Function}\n * @decorator\n * @class\n */\nexport function PreHook(\n  method: string,\n  fn?: MongoosePreHookSyncCB<any> | MongoosePreHookAsyncCB<any> | PreHookOptions,\n  options?: PreHookOptions\n): Function {\n  return (...args: any[]) => {\n    if (getDecoratorType(args) === \"method\") {\n      options = fn as PreHookOptions;\n      fn = args[0][args[1]].bind(args[0]);\n    }\n\n    options = options || {};\n\n    applySchemaOptions(args[0], {\n      pre: [\n        Object.assign(options, {\n          method,\n          fn: fn as MongoosePreHookSyncCB<any> | MongoosePreHookAsyncCB<any>\n        })\n      ]\n    });\n  };\n}\n"],"sourceRoot":"../../src"}