{"version":3,"sources":["decorators/ref.ts"],"names":[],"mappings":"AAIA,OAAO,EAAC,mBAAmB,EAAC,MAAM,mCAAmC,CAAC;AAEtE,oBAAY,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,wBAAgB,GAAG,CAAC,KAAK,EAAE,MAAM,GAAG,GAAG,EAAE,IAAI,GAAE,mBAAmD,YAgBjG","file":"ref.d.ts","sourcesContent":["import {Property, Schema} from \"@tsed/common\";\nimport {applyDecorators, Store, StoreFn, StoreMerge} from \"@tsed/core\";\nimport {Schema as MongooseSchema} from \"mongoose\";\nimport {MONGOOSE_MODEL_NAME, MONGOOSE_SCHEMA} from \"../constants\";\nimport {MongooseSchemaTypes} from \"../interfaces/MongooseSchemaTypes\";\n\nexport type Ref<T> = T | string;\n\n/**\n * Define a property as mongoose reference to other Model (decorated with @Model).\n *\n * ### Example\n *\n * ```typescript\n *\n * @Model()\n * class FooModel {\n *\n *    @Ref(Foo2Model)\n *    field: Ref<Foo2Model>\n *\n *    @Ref(Foo2Model)\n *    list: Ref<Foo2Model>[]\n * }\n *\n * @Model()\n * class Foo2Model {\n * }\n * ```\n *\n * @param model\n * @param type\n * @returns {Function}\n * @decorator\n * @mongoose\n * @property\n */\nexport function Ref(model: string | any, type: MongooseSchemaTypes = MongooseSchemaTypes.OBJECT_ID) {\n  return applyDecorators(\n    Property({use: String}),\n    Schema({\n      type: String,\n      example: \"5ce7ad3028890bd71749d477\",\n      description: \"Mongoose Ref ObjectId\"\n    }),\n    StoreFn((store: Store) => {\n      delete store.get(\"schema\").$ref;\n    }),\n    StoreMerge(MONGOOSE_SCHEMA, {\n      type: MongooseSchema.Types[type],\n      ref: typeof model === \"string\" ? model : Store.from(model).get(MONGOOSE_MODEL_NAME)\n    })\n  );\n}\n"],"sourceRoot":"../../src"}