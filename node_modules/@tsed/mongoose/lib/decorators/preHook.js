"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const schemaOptions_1 = require("../utils/schemaOptions");
/**
 *
 * We can simply attach a `@PreHook` decorator to your model class and
 * define the hook function like you normally would in Mongoose.
 *
 * ```typescript
 * import {IgnoreProperty, Required} from "@tsed/common";
 * import {PreHook, Model} from "@tsed/mongoose";
 *
 * @Model()
 * @PreHook("save", (car: CarModel, next) => {
 *    if (car.model === 'Tesla') {
 *        car.isFast = true;
 *      }
 *      next();
 *})
 * export class CarModel {
 *
 *    @IgnoreProperty()
 *    _id: string;
 *
 *    @Required()
 *    model: string;
 *
 *    @Required()
 *    isFast: boolean;
 *
 *    // or Prehook on static method
 *    @PreHook("save")
 *    static preSave(car: CarModel, next) {
 *       if (car.model === 'Tesla') {
 *           car.isFast = true;
 *       }
 *       next();
 *    }
 * }
 * ```
 *
 * This will execute the pre-save hook each time a `CarModel` document is saved.
 *
 * @param {string} method
 * @param fn
 * @param options
 * @returns {Function}
 * @decorator
 * @class
 */
function PreHook(method, fn, options) {
    return (...args) => {
        if (core_1.getDecoratorType(args) === "method") {
            options = fn;
            fn = args[0][args[1]].bind(args[0]);
        }
        options = options || {};
        schemaOptions_1.applySchemaOptions(args[0], {
            pre: [
                Object.assign(options, {
                    method,
                    fn: fn
                })
            ]
        });
    };
}
exports.PreHook = PreHook;

//# sourceMappingURL=preHook.js.map
