{"version":3,"sources":["decorators/schema.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,cAAc,EAAC,MAAM,UAAU,CAAC;AAExC,OAAO,EAAC,qBAAqB,EAAC,MAAM,eAAe,CAAC;AAEpD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAgB,MAAM,CAAC,OAAO,CAAC,EAAE,qBAAqB,GAAG,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;AAC/E;;;;;;;GAOG;AACH,wBAAgB,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC","file":"schema.d.ts","sourcesContent":["import {Property} from \"@tsed/common\";\nimport {applyDecorators, getDecoratorType, StoreMerge} from \"@tsed/core\";\nimport {createSchema} from \"@tsed/mongoose\";\nimport {SchemaTypeOpts} from \"mongoose\";\nimport {MONGOOSE_SCHEMA} from \"../constants\";\nimport {MongooseSchemaOptions} from \"../interfaces\";\n\n/**\n * Define a class as a Mongoose Schema ready to be used to compose other schemes and models.\n *\n * ### Example\n *\n * ```typescript\n * @Schema()\n * export class EventSchema {\n *   @Property()\n *   field: string;\n * }\n * ```\n *\n * ### Options\n *\n * - `schemaOptions` (mongoose.SchemaOptions): Option to configure the schema behavior.\n *\n * @param {MongooseSchemaOptions | undefined} options\n * @returns {(target: any) => void}\n * @decorator\n * @mongoose\n * @property\n * @class\n */\nexport function Schema(options?: MongooseSchemaOptions): (target: any) => void;\n/**\n * Attach a schema on property class.\n *\n * @param {SchemaTypeOpts<any>} definition\n * @returns {Function}\n * @decorator\n * @mongoose\n */\nexport function Schema(definition: SchemaTypeOpts<any>): Function;\nexport function Schema(options: MongooseSchemaOptions | SchemaTypeOpts<any> = {}) {\n  return (...parameters: any[]) => {\n    switch (getDecoratorType(parameters)) {\n      case \"property\":\n        return applyDecorators(Property(), StoreMerge(MONGOOSE_SCHEMA, options))(...parameters);\n\n      case \"class\":\n        StoreMerge(MONGOOSE_SCHEMA, createSchema(parameters[0], options as MongooseSchemaOptions))(...parameters);\n        break;\n    }\n  };\n}\n"],"sourceRoot":"../../src"}