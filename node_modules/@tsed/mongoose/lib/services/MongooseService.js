"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const Mongoose = require("mongoose");
const ts_log_debug_1 = require("ts-log-debug");
let MongooseService = class MongooseService {
    constructor() {
        /**
         *
         * @type {Map<any, any>}
         * @private
         */
        this._instances = new Map();
    }
    /**
     *
     * @returns {Promise<"mongoose".Connection>}
     */
    connect(id, url, connectionOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.has(id)) {
                return yield this.get(id);
            }
            ts_log_debug_1.$log.info(`Connect to mongo database: ${id}`);
            ts_log_debug_1.$log.debug(`Url: ${url}`);
            ts_log_debug_1.$log.debug(`options: ${JSON.stringify(connectionOptions)}`);
            try {
                const mongoose = yield Mongoose.connect(url, connectionOptions);
                this._instances.set(id, mongoose);
                return mongoose;
            }
            catch (er) {
                /* istanbul ignore next */
                ts_log_debug_1.$log.error(er);
                /* istanbul ignore next */
                process.exit();
            }
        });
    }
    /**
     *
     * @returns {"mongoose".Connection}
     */
    get(id = "default") {
        return this._instances.get(id);
    }
    /**
     *
     * @param {string} id
     * @returns {boolean}
     */
    has(id = "default") {
        return this._instances.has(id);
    }
    closeConnections() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const instance of this._instances.values()) {
                /**
                 * Connection ready state
                 * 0 = disconnected
                 * 1 = connected
                 * 2 = connecting
                 * 3 = disconnecting
                 */
                if (instance != null &&
                    instance.connection != null &&
                    (instance.connection.readyState === 1 || instance.connection.readyState === 2)) {
                    yield instance.disconnect();
                }
            }
        });
    }
};
MongooseService = tslib_1.__decorate([
    common_1.Service()
], MongooseService);
exports.MongooseService = MongooseService;

//# sourceMappingURL=MongooseService.js.map
