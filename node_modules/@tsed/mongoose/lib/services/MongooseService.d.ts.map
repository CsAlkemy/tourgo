{"version":3,"sources":["services/MongooseService.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAC;AAGrC,qBACa,eAAe;IAC1B;;;;OAIG;IACH,OAAO,CAAC,UAAU,CAA6C;IAE/D;;;OAGG;IACG,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC;IAsBnG;;;OAGG;IACH,GAAG,CAAC,EAAE,GAAE,MAAkB,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS;IAI1D;;;;OAIG;IACH,GAAG,CAAC,EAAE,GAAE,MAAkB,GAAG,OAAO;IAI9B,gBAAgB;CAkBvB","file":"MongooseService.d.ts","sourcesContent":["import {Service} from \"@tsed/common\";\nimport * as Mongoose from \"mongoose\";\nimport {$log} from \"ts-log-debug\";\n\n@Service()\nexport class MongooseService {\n  /**\n   *\n   * @type {Map<any, any>}\n   * @private\n   */\n  private _instances: Map<string, Mongoose.Mongoose> = new Map();\n\n  /**\n   *\n   * @returns {Promise<\"mongoose\".Connection>}\n   */\n  async connect(id: string, url: string, connectionOptions: Mongoose.ConnectionOptions): Promise<any> {\n    if (this.has(id)) {\n      return await this.get(id)!;\n    }\n\n    $log.info(`Connect to mongo database: ${id}`);\n    $log.debug(`Url: ${url}`);\n    $log.debug(`options: ${JSON.stringify(connectionOptions)}`);\n\n    try {\n      const mongoose = await Mongoose.connect(url, connectionOptions);\n      this._instances.set(id, mongoose);\n\n      return mongoose;\n    } catch (er) {\n      /* istanbul ignore next */\n      $log.error(er);\n      /* istanbul ignore next */\n      process.exit();\n    }\n  }\n\n  /**\n   *\n   * @returns {\"mongoose\".Connection}\n   */\n  get(id: string = \"default\"): Mongoose.Mongoose | undefined {\n    return this._instances.get(id);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  has(id: string = \"default\"): boolean {\n    return this._instances.has(id);\n  }\n\n  async closeConnections() {\n    for (const instance of this._instances.values()) {\n      /**\n       * Connection ready state\n       * 0 = disconnected\n       * 1 = connected\n       * 2 = connecting\n       * 3 = disconnecting\n       */\n      if (\n        instance != null &&\n        instance.connection != null &&\n        (instance.connection.readyState === 1 || instance.connection.readyState === 2)\n      ) {\n        await instance.disconnect();\n      }\n    }\n  }\n}\n"],"sourceRoot":"../../src"}