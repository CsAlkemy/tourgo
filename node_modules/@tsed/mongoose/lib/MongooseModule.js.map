{"version":3,"sources":["MongooseModule.ts"],"names":[],"mappings":";;;AAAA,yCAA2F;AAC3F,qCAAqC;AAErC,uFAAkF;AAClF,gEAA2D;AAG3D,IAAa,cAAc,GAA3B,MAAa,cAAc;IAUzB,YAAwC,UAA8B,EAAU,eAAgC;QAAxE,eAAU,GAAV,UAAU,CAAoB;QAAU,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAEpH,OAAO;QACL,MAAM,QAAQ,GAAiC,EAAE,CAAC;QAElD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;SAChG;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;gBAC7C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/G,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qDAAgC,CAAC,CAAC;IACxD,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;IACjD,CAAC;CACF,CAAA;AAjCC;IADC,iBAAQ,CAAC,cAAc,CAAC;;2CACL;AAGpB;IADC,iBAAQ,CAAC,4BAA4B,CAAC;;yDACe;AAGtD;IADC,iBAAQ,CAAC,eAAe,CAAC;;4CACmB;AARlC,cAAc;IAD1B,eAAM,EAAE;IAWM,mBAAA,2BAAkB,CAAA;uDAAkE,iCAAe;GAVrG,cAAc,CAmC1B;AAnCY,wCAAc","file":"MongooseModule.js","sourcesContent":["import {AfterRoutesInit, Constant, ExpressApplication, Module, OnInit} from \"@tsed/common\";\nimport * as Mongoose from \"mongoose\";\nimport {MDBConnection} from \"./interfaces\";\nimport {ValidationErrorMiddleware} from \"./middlewares/ValidationErrorMiddleware\";\nimport {MongooseService} from \"./services/MongooseService\";\n\n@Module()\nexport class MongooseModule implements OnInit, AfterRoutesInit {\n  @Constant(\"mongoose.url\")\n  private url: string;\n\n  @Constant(\"mongoose.connectionOptions\")\n  private connectionOptions: Mongoose.ConnectionOptions;\n\n  @Constant(\"mongoose.urls\")\n  private urls: {[key: string]: MDBConnection};\n\n  constructor(@ExpressApplication private expressApp: ExpressApplication, private mongooseService: MongooseService) {}\n\n  $onInit(): Promise<any> | void {\n    const promises: Promise<Mongoose.Mongoose>[] = [];\n\n    if (this.url) {\n      promises.push(this.mongooseService.connect(\"default\", this.url, this.connectionOptions || {}));\n    }\n\n    if (this.urls) {\n      Object.keys(this.urls).forEach((key: string) => {\n        promises.push(this.mongooseService.connect(key, this.urls[key].url, this.urls[key].connectionOptions || {}));\n      });\n    }\n\n    return Promise.all(promises);\n  }\n\n  $afterRoutesInit(): void {\n    this.expressApp.use(ValidationErrorMiddleware as any);\n  }\n\n  $onDestroy(): Promise<any> | void {\n    return this.mongooseService.closeConnections();\n  }\n}\n"],"sourceRoot":"../src"}